apply plugin: 'com.android.application'
apply plugin: "com.google.android.gms.oss-licenses-plugin"

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "com.mobiledgex.sdkdemo"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode 29
        versionName '3.0.13'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Use local project Matching Engine SDK:
    implementation project(":matchingengine")

    implementation 'com.google.guava:guava:29.0-android'

    // Use maven:
    //implementation 'com.mobiledgex:matchingengine:3.0.14'
    // Dependencies of Matching Engine, if using Maven:
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    // Common dependencies between maven and local project:
    implementation "io.grpc:grpc-okhttp:${grpcVersion}" // If using embedded OKHttp from GPRC
    implementation "io.grpc:grpc-protobuf-lite:${grpcVersion}"

    // For Google Services.
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    implementation("com.google.android.gms:play-services-oss-licenses:17.0.0")
}

// Generate the RELEASE variant app, to get App level third party disclosures, then convert to text file (same as for App Display)
task generateThirdPartyLicensesTxt {
    dependsOn "generateReleaseAssets"
    // Convert the generated output metadata into a single text file:
    def currDir = System.getProperty("user.dir");
    printf("CurrentDir: %s\n", currDir)
    def licensesFile = new File(currDir + "/app/build/generated/third_party_licenses/release/res/raw/third_party_licenses")
    def licensesMetadataFile = new File(currDir + "/app/build/generated/third_party_licenses/release/res/raw/third_party_license_metadata")
    if (!licensesFile.canRead() || licensesFile.length() == 0) {
        printf("Can't read release license file: [%s]!\n", licensesFile)
        return
    }
    if (!licensesMetadataFile.canRead() || licensesMetadataFile.length() == 0) {
        printf("Can't read release license metadata file [%s]!\n", licensesMetadataFile)
        return
    }

    def licFileReader = new java.io.RandomAccessFile(licensesFile, "r")
    File thirdPartyLicensesTextFile = new File("THIRD_PARTY_LICENSES.txt")

    def licenseWriter = new FileWriter(thirdPartyLicensesTextFile, false) // overwrite mode.

    def lines = licensesMetadataFile.readLines()
    def licenseSeparator = "================================================================================"
    lines.each { String line ->
        {
            printf("line: %s\n", line)
            String []data = line.split(" ", 2)
            //printf("data0: %s\n", data[0])
            //printf("data1: %s\n", data[1])

            String []licLocation = data[0].split(":", 2)

            def packageString = data[1]
            printf("package: %s\n", packageString)

            def offset = Long.parseLong(licLocation[0])
            printf("Offset seek: %d\n", offset)
            def licenseLength = Long.parseLong(licLocation[1])
            printf("Length of lic text: %d\n", licenseLength)

            // ASCII files, according to "FILE"
            licFileReader.seek(offset)
            byte []licText = new byte[licenseLength]
            licFileReader.read(licText, 0, (int)licenseLength)

            def packageOut = String.format("%s\nPackage: %s\n", licenseSeparator, packageString)
            def licenseTextOut = String.format("License:\n%s\n", new String(licText, "ASCII"))
            //printf("%s", packageOut)
            //printf("%s", licenseTextOut)

            licenseWriter.write(packageOut)
            licenseWriter.write(licenseTextOut)
        }
    }
    licenseWriter.flush()
    licenseWriter.close()
    licFileReader.close()
}