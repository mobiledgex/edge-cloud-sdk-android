// Define Modules for Doxygen Parsing

// Classes Modules
/*!
 * \defgroup classes Classes

   * \defgroup classes_util Utility Classes
   * \ingroup classes
 */

// Function Groups Modules
/*!
 * \defgroup functiongroups Function Groups

   * \defgroup functions_dmeapis MatchingEngine APIs
   * \ingroup functiongroups

   * \defgroup functions_dmeutils MatchingEngine Utility Functions
   * \ingroup functiongroups

   * \defgroup functions_edge_events_api EdgeEvents API
   * \ingroup functiongroups\

   * \defgroup functions_getconnection GetConnection Functions
   * \ingroup functiongroups
   * \section getconnectionworkflow GetConnection Workflow Example

   * \defgroup functions_getconnectionutils GetConnection Utility Functions
   * \ingroup functiongroups
 */

// Exceptions Modules
/*!
 * \defgroup exceptions Exceptions

   * \defgroup exceptions_dme MatchingEngine API Exceptions
   * \ingroup exceptions

   * \defgroup exceptions_getconnection GetConnection Exceptions
   * \ingroup exceptions

   * \defgroup exceptions_util Utility Exceptions
   * \ingroup exceptions
 */

// Add Information to index.html (main landing page)
/*!
 * \mainpage
 *
 * \section intro_section Introduction
 * These pages provide documentation for Namespaces, Classes, Functions, and
   Variables within the MobiledgeX Android SDK.
 *
 * \section navigating_section Navigating the SDK Documentation
 * Use either the tabs or the treeview to find the desired page.
 * There are two main sections: Classes and Modules.
 * Classes will bring you to a list of all classes in the Android MobiledgeX SDK.
 * Modules will bring you to a more organized breakdown of the Android SDK.
 * The Modules are split up into \link classes Classes \endlink, \link functiongroups Function Groups \endlink, and \link exceptions Exceptions \endlink.
 * Each of these modules group similar classes, functions, or exceptions together.
 * For example, all of the \link functions_dmeapis MatchingEngine API functions \endlink will be found under Modules -> Functions Groups -> MatchingEngine APIs.
 *
 * \section starting_section Where to Start?
 * The main class that developers will be using is the
   com.mobiledgex.matchingengine.MatchingEngine class.
 * This class provides functions to register the user to the Distributed Matching Engine, find the nearest application instance, and then get a connection to that application instance that is ready to be used (See diagram below for workflow).
 * Go to the sections: \link functions_dmeapis MatchingEngine APIs \endlink and \link functions_getconnection GetConnection Functions \endlink to get started.
 * \image html dmeflow.png width=800cm height=500cm
 *
 * \section how_to How To
 * First, you need a MatchingEngine instance. Since MachingEngine needs location permissions, this might be reinitialized onResume():
 * \snippet EngineCallTest.java meconstructorexample
 * For privacy reasons, there is a flag the application should ask the user for permission before enabling, concerning location usage. This
 * is in addition to normal operating system permissions:
 * \snippet MainActivity.java matchingengine_allow_location_usage_gdpr
 *
 * Then, register, and find the first closest cloudlet. If not sure of your organization or appInst details, log in and view the app
 * details here:
 * https://console.mobiledgex.net
 *
 * Create a register client request:
 * \snippet EngineCallTest.java createdefregisterexample

 * Register, with a sane timeout, like 5 seconds.
 * \snippet EngineCallTest.java registerexample
 *
 * Create a default FindCloudlet Request:
 * \snippet EngineCallTest.java createdeffindcloudletexample
 *
 * FindCloudlet, with a sane timeout, like 5 seconds.
 * \snippet EngineCallTest.java findcloudletexample
 *
 * If interested in dynamic edge migration, you can enable it:
 * \snippet MainActivity.java enable_edgeevents
 *
 * Then, attach a EdgeEvents subscriber, described shortly later:
 * \snippet MainActivity.java edgeevents_subsscriber_setup_example
 *
 * Here is the EdgeEventsSubscriber class just mentioned. The following example code is a Guava EventBus type Subscriber to EdgeEvents.
 * onMessageEvent can be any name as the EventBus will forward it to the matching class type. The FindCloudletEvent variant is good to
 * subscribe in your application. When recieved, the app should save state, and move to the next closer cloudlet.
 *
 * \snippet MainActivity.java edgeevents_subscriber_template
 *
 * Once defined, you can start monitoring:
 * \snippet MainActivity.java startedgeevents_example
 *
 * If the application onPause() is called, consider calling stopEdgeEvents() to free resources.
 *
 * \section edgeevents_subscriber_template cleanup
 * When the app needs to quit or free resources, call close():
 * \snippet MainActivity.java me_cleanup
 */
